<!DOCTYPE html>
<html>
<head>
    <title>Process Initiator</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Oct 22 2014 16:15:54 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Oct 22 2014 16:15:54 GMT-0700 (PDT)";
        var CHECKSUM = 18813294967;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});


Ext.override(Ext.grid.column.Action, {

	buttonText: 'clickme',
    defaultRenderer: function(v, meta, record, rowIdx, colIdx, store, view){
    	var me = this,
            prefix = Ext.baseCSSPrefix,
            scope = me.origScope || me,
            items = me.items,
            len = items.length,
            i = 0,
            item, ret, disabled, tooltip;
 
        // Allow a configured renderer to create initial value (And set the other values in the "metadata" argument!)
        // Assign a new variable here, since if we modify "v" it will also modify the arguments collection, meaning
        // we will pass an incorrect value to getClass/getTip
        ret = Ext.isFunction(me.origRenderer) ? me.origRenderer.apply(scope, arguments) || '' : '';

        meta.tdCls += ' ' + Ext.baseCSSPrefix + 'action-col-cell';
        for (; i < len; i++) {
            item = items[i];

            disabled = item.disabled || (item.isDisabled ? item.isDisabled.call(item.scope || scope, view, rowIdx, colIdx, item, record) : false);
            tooltip = disabled ? null : (item.tooltip || (item.getTip ? item.getTip.apply(item.scope || scope, arguments) : null));

            // Only process the item action setup once.
            if (!item.hasActionConfiguration) {

                // Apply our documented default to all items
                item.stopSelection = me.stopSelection;
                item.disable = Ext.Function.bind(me.disableAction, me, [i], 0);
                item.enable = Ext.Function.bind(me.enableAction, me, [i], 0);
                item.hasActionConfiguration = true;
            }

       ret += '<button class="' + me.buttonCls + ' ' + prefix + 'action-col-' + String(i) + '">' + me.buttonText + '</button>';     
        }
        return ret;    
    },
});
Ext.define('Rally.technicalservices.ProcessDefinition',{
    logger: new Rally.technicalservices.Logger(),
    processName: '',
    shortName: '',
    /*
     * processType:  Type of process this is enforcing:
     * 		-- new  : creation of a new artifact with rules
     * 		-- edit : editing of an existing artifact with rules
     */
    processType: 'edit', //edit is default
    rallyType: '',  //Required
    /*
     * rallyField:  The field that the processDetail rules belong to.  If this is null, then 
     * this process definition applies to new objects.  
     * 
     */
    rallyField: '',
    /*
     * processDetail - current: The rules for this process
     * 
     *    EXAMPLE (edit):
     *    {
     *    	<triggerValue>: ['requiredfield1','requiredfield2',...] 
     *    }
     *    
     *    EXAMPLE (new):
     *    
     *    {
     *    	 required: ['requiredfield1','requiredfield2',...] 
     *    }
     * 
     */
    processDetail: {}, 
    /*
     * processDetail - wannabe: The rules for this process
     * 
     *    EXAMPLE:
     *    {
     *    	type:  presence | inclusion* | exclusion* | format*   (*not implemented yet),
     *      field:  the field that the rule is applied to (e.g. FixedInBuild),
     *      triggerValues: [] Array of values that trigger this rule (e.g. ['Fixed', 'Closed'];  If this is empty, then it applies to all objects
     *    }
     * 
     */
 
    constructor: function(config){
        Ext.apply(this,config);
    },
    isNew: function(){
    	return (this.processType == 'new');
    },
    /*
     * getProcessFields: returns the fields that are defined in all the rules for the current process
     * 
     */
    getProcessFields: function(){
    	var fields = [];
    	if (this.rallyField){
    		fields.push(this.rallyField);
    	}
    	Ext.each(Object.keys(this.processDetail), function(pdkey){
			Ext.each(this.processDetail[pdkey], function(pdd){
				fields.push(pdd);
			}, this);
		}, this);
    	return fields; 
    },
    
    /*
     * getTriggeredProcessFields: returns the fields that are triggered by for the current value of the process field
     * 
     */
    getTriggeredProcessFields: function(value){
    	return this.processDetail[value];
    },
    
    validate: function(detail_field, detail_value, trigger_value){
    	this.logger.log('validate',trigger_value,detail_field,detail_value);
    	var req_fields = [];
    	
    	if (this.isNew()){
    		return this._validateNew(detail_field,detail_value);
    	}
    	
    	if (Ext.Array.contains(Object.keys(this.processDetail), trigger_value.toString())){
        	req_fields = this.processDetail[trigger_value.toString()];
    	} else {
    		req_fields = this.processDetail.required;
    	}
    	if (Ext.Array.contains(req_fields, detail_field)){
    		if (detail_value && detail_value.toString().length > 0){
    			return {valid: true};  
    		}
    	} else {
			return {valid: true};  
    	}
    	var msg = Ext.String.format("A value for field {0} is required when {1} = {2}.", detail_field, this.rallyField, trigger_value);
		return {valid: false, message: msg};  

    },
    _validateNew: function(detail_field, detail_value){
    	var req_fields = this.processDetail.required;
    	console.log(req_fields,this.processDetail.required, this.processDetail['required']);
    	if (Ext.Array.contains(req_fields, detail_field)){
    		console.log('array contains ', detail_field, detail_value);
    		if (detail_value && detail_value.length > 0){
    			return {valid: true};  
    		}
    	} else {
			return {valid: true};  
    	}
    	var msg = Ext.String.format("A value for field {0} is required for a new {1}.", detail_field, this.rallyType);
		return {valid: false, message: msg};  
    }
    
/*
 * This is just an example of validations in the model object.  
 * Trying to make the processDetail similiar so that someday we may be able to take
 * advantage of this functionality
 * 
 * validations: [
 *	                {type: 'presence',  field: 'age'},
 *                  {type: 'length',    field: 'name',     min: 2},
 *                  {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
 *                  {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
 *                  {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
 *               ]
 * 
 */ 
    
});



Ext.define('Rally.technicalservices.dialog.Process',{
    extend: 'Rally.ui.dialog.Dialog',
    logger: new Rally.technicalservices.Logger(),
    autoShow: true,
    draggable: true,
    width: 400,
    processDefinition: null,
    record: null,
    projectRef: null,
    
    constructor: function(config){
         Ext.apply(this,config);
	     
   	     this.title = this.processDefinition.processName;
         this.items = this._buildItems(this.record, this.processDefinition);
         this.logger.log('ProcessDefinition dialog constructor', this.title, this.items);
         
         this.callParent(arguments);

         if (this.processDefinition.isNew()){
             Rally.data.ModelFactory.getModel({
         	    type: this.processDefinition.rallyType,
         	    scope: this,
         	    success: function(model) {
         	    	var record = Ext.create(model, {});
         	    	this.record = record;
         	    	this.logger.log('New record created. Building fields',this.processDefinition.getProcessFields());
         	    	this._buildDetailFields(this.processDefinition.getProcessFields());
         	    }
         	});
         } else {
             this.down('#' + this.processDefinition.rallyField).setValue(this.record.get(this.processDefinition.rallyField));
         } 
    },
    _buildItems: function(rec){
  	     var items = [];
  	     items.push({xtype:'container',itemId:'message_box'});
  	     if (!this.processDefinition.isNew()){
  	  	     items.push(this._getProcessFieldComponent(rec));  	    	 
  	     }
  	     items.push(this._getDetailFieldsComponentBox());
  	     items.push(this._getSaveButton());
  	     items.push(this._getCancelButton());
  	     return items;
    },
    _getSaveButton: function(){
    	return {
            xtype     : 'rallybutton',
            text      : 'Save',
            scope: this,
            handler      : this._save
    	}
    },
    _getCancelButton: function(){
    	return {
            xtype     : 'rallybutton',
            text      : 'Cancel',
            scope: this,
            handler      : this._cancel
        }
    },

    _getDetailFieldsComponentBox: function(){
		return {
				xtype: 'container',
				itemId: 'detail-container'
		};

    },
    _getProcessFieldComponent: function(rec){
    	this.logger.log('_getProcessFieldComponent', rec);
    	
    	if (this.processDefinition.isNew()){
    		return {};
    	}
    	var field_value = rec.get(this.processDefinition.rallyField);
    	var field = rec.getField(this.processDefinition.rallyField)
    	
    	var component = this._getFieldComponent(field, field_value);
    	component['scope'] = this;
    	if (component.xtype == 'rallycheckboxfield'){
        	component['handler'] = this._processFieldChanged;
    	} else { //Dropdown list
        	component['listeners'] = {
                	scope: this,
                	change: this._processFieldChanged
                };
    	}
    	return component;
    },
    _processFieldChanged: function(ctl, val){
    	this.logger.log('_processFieldChanged',ctl, ctl.getValue());
    	this.down('#detail-container').removeAll();
    	this.down('#message_box').update('');

    	var detail_fields = this.processDefinition.getTriggeredProcessFields(ctl.value.toString());
    	this.record.set(this.processDefinition.rallyField,ctl.getValue());
    	
    	Ext.each(detail_fields, function(df){
    		this.logger.log('_processFieldChanged => detail_field', df);
        	var field_obj = this.record.getField(df);
        	var field_val = this.record.get(df);
        	var detail_component = this._getFieldComponent(field_obj, field_val);
    		this.down('#detail-container').add(detail_component);
    	}, this);
    },
    _buildDetailFields: function(detail_fields){
    	this.down('#detail-container').removeAll();
    	this.down('#message_box').update('');

    	Ext.each(detail_fields, function(df){
    		this.logger.log('_buildDetailFields => detail_field', df);
        	var field_obj = this.record.getField(df);
        	var field_val = this.record.get(df);
        	var detail_component = this._getFieldComponent(field_obj, field_val);
    		this.down('#detail-container').add(detail_component);
    	}, this);
    	
    },
    _getFieldComponent: function(field, val){
    	this.logger.log('_getFieldComponent',field.name, val, field.attributeDefinition.AttributeType);
     
    	var field_name = field.name;
    	if (field.attributeDefinition.Custom){
    		field_name = field_name.replace(/^c\_/,"");
    	}
    	
    	var component = {
       		 itemId: field_name,
       		 fieldLabel: field.displayName,
       		 labelWidth: 150,
       		 minWidth: 400
        };

    	//"BINARY_DATA", "BOOLEAN", "COLLECTION", "DATE", "DECIMAL", "INTEGER", "OBJECT", "QUANTITY", "RATING", "STATE", "STRING", "TEXT", "WEB_LINK", "RAW"
    	switch(field.attributeDefinition.AttributeType){
    		case 'BOOLEAN':  
    			component['xtype'] = 'rallycheckboxfield';
    			break;
    		case 'TEXT':
    			component['xtype'] = 'textareafield';
    			break;
    		case 'STRING':
    		case 'STATE':
    		case 'RATING':
    			console.log(field.attributeDefinition.AllowedValues);
    			if (field.attributeDefinition.AttributeType == 'RATING' || 
    					field.attributeDefinition.AllowedValues.length > 0){
    				component['xtype'] = 'rallyfieldvaluecombobox';
    				component['model'] = this.processDefinition.rallyType;
    				component['field'] = field.name;

    			} else {
    				component['xtype'] = 'textfield';
    			}
    			break;
    		case 'DATE':
    			component['xtype'] = 'rallydatefield';

    			break;
    		case 'DECIMAL':
    		case 'INTEGER':
    			component['xtype'] = 'rallynumberfield';
    			break;
    		case 'OBJECT':
    			//Release, Iteration, User, Project, artifact links
    			var schema = field.attributeDefinition.SchemaType;
    			console.log('schema',schema);
    			if (schema == 'Iteration') {
    				component['xtype'] = 'rallyiterationcombobox';
    				component['allowNoEntry'] = true;
    				if (val && val._ref){
        				val = val._ref;
    				}
    			} else if (schema == 'Release') {
    				component['xtype'] = 'rallyreleasecombobox';
    				component['allowNoEntry'] = true;

    				if (val && val._ref){
        				val = val._ref;
    				}
    			} else if (schema == 'User') {
    				component['xtype'] = 'rallyusersearchcombobox';
    				component['allowNoEntry'] = true;

    				component['project'] = this.projectRef;
    				if (val && val._ref){
        				val = val._ref;
    				}
    			} else if (schema == 'Project') {
    				component['xtype'] = 'rallyprojectpicker';
    				component['allowNoEntry'] = true;

    				val = this.projectRef;
    				
    			} else {
    				//This is a project or artifact link and shouldn't be changed.
    			}
    			break;
    		case 'QUANTITY':
   // 		case 'STATE':
    		case 'WEB_LINK':
    			
    		//These should not be options for this 
    		//case 'RATING':
    		case 'RAW':
    		case 'BINARY_DATA':
    		case 'COLLECTION':
    		default:
    			component['xtype'] = 'container';
    	}
         if (field.attributeDefinition.ReadOnly == true){
        //we need to do something with read only
         }
         this.logger.log('value', val);
        if (val && val.length > 0){
        	component['value'] = val;
        }
        return component;

    },
    _save: function(){
    	//validate
    	this.down('#message_box').update('');
    	var validated = false;
    	if (this.processDefinition.isNew()){
    		validated = this._validateNew();
    	} else {
    		validated = this._validate()
    	}
    	
    	if (validated) {
        	this.record.save();
        	this._cancel();
    	}
    },
    _validate: function(){
    	
    	var val = this.record.get(this.processDefinition.rallyField);
    	var validated = true;
    	Ext.each(this.down('#detail-container').items.items, function(item){
    		var validation_result = this.processDefinition.validate(item.itemId, item.value, val);
    		console.log(validation_result, validation_result.valid == false, item.itemId);
    		if (validation_result.valid == false){
    			validated = false;
    			this.down('#message_box').update('<font color="red">' + validation_result.message + '</font>');
    		} else {
        		this.record.set(item.itemId, item.value);
    		}
    	},this);
    	return validated;
    },
    _validateNew: function(){
    	this.logger.log('_validateNew');
    	var validated = true;
    	Ext.each(this.down('#detail-container').items.items, function(item){
    		var validation_result = this.processDefinition.validate(item.itemId, item.value);
    		if (validation_result.valid == false){
    			validated = false;
    			this.down('#message_box').update('<font color="red">' + validation_result.message + '</font>');
    		} else {
        		this.record.set(item.itemId, item.value);
    		}
    	},this);
    	return validated;
    	
    },
     _cancel: function(){
    	this.destroy();
    }
});
Ext.define('Rally.technicalservices.ProcessDriver',{
    logger: new Rally.technicalservices.Logger(),
    projectRef: '',

/*
 * processDefinitions:  Array of Rally.technicalservices.ProcessDefinition objects to define the process for this app
 */
	processDefinitions: [],
/*
 * static_fields:  These fields will always be fetched and displayed regardless of process definition
 */
    static_fields:  ['FormattedID','Name'],  
    
	constructor: function(config){
        Ext.apply(this,config);
    },
/*
 * getDisplayFields:  Returns an array of strings representing fields to display on the grid
 * 
 */
    getDisplayFields: function(){
    	this.logger.log('getDisplayFields');
    	var display_fields = this.static_fields;
    	Ext.each(this.processDefinitions, function(pd){
    		if (!pd.isNew()){
        		display_fields.push(pd.rallyField);
    		}
    	},this);
    	return display_fields;
    },
/*
 * getFetchFields:  Returns an array of strings representing fields to fetch from 
 * the database.  This will include fields that should not be displayed but should
 * be fetched because they are included in the process definition
 * 
 */
    getFetchFields: function(){
    	this.logger.log('getFetchFields');
    	var fetch_fields = this.static_fields;
    	Ext.each(this.processDefinitions, function(pd){
    		fetch_fields = (Ext.Array.merge(fetch_fields,pd.getProcessFields()));
    	}, this);
    	this.logger.log(fetch_fields);
    	return fetch_fields;
    },
/*
 * getColumnConfigurations: Returns an array of column objects to render in the grid.  
 * 
 */
    getColumnConfigurations: function(){
    	this.logger.log('getColumnConfigurations');
    	var me = this;
    	
      	var columns = [{ 
            text: 'FormattedID',
            dataIndex: 'FormattedID',
            width: 50,
        },{
            text: 'Name',
            dataIndex: 'Name',
            flex: 1
        }]; 
    	Ext.each(this.processDefinitions, function(pd){
    		if (!pd.isNew()){
				var process_col = {
						xtype: 'actioncolumn',
						buttonText: pd.shortName,
						buttonCls: 'ts-secondary-button',
						scope: this,
						items: [{
							scope: this,
			                handler: function(grid, row, col) {
			                	me._initiateProcessDialog(grid, row, pd);
			                }
			            }]
					}
				}
				columns.push(process_col);
    	},this);
     return columns;        
    },
    _getArtifactType: function(){
   	 return this.processDefinitions[0].rallyType;
    },
    _getNewArtifactProcessDefinition: function(){
      	 this.logger.log('_getNewArtifactProcessDefinition');
	   	 var newpd = {};
      	 Ext.each(this.processDefinitions, function(pd){
      		 if (pd.isNew()){
      			 newpd = pd; 
      		 }
      	 },this);
      	 return newpd;  
       },
     getAddNewText: function(){
    	 var pd = this._getNewArtifactProcessDefinition();
    	 console.log(pd);
    	 if (!_.isEmpty(pd)){
    		 console.log(pd.shortName);
    		 if( pd.shortName.length > 0){
    			 return pd.shortName;
    		 };
    	 }
    	 return '+Add New';
     },

    /*
     * addNew:  Adds a new artifact based on the process definition rules.  If there
     * is no process definition for add new, then it should launch the artifact add new window. 
     */
    addNew: function(){
     	this.logger.log('addNew');
    	
    	var new_pd = this._getNewArtifactProcessDefinition();
    	if (_.isEmpty(new_pd)){
    		//kick off a new object.
    		Rally.nav.Manager.create(this._getArtifactType());

     	} else {
       	   	dlg = Ext.create('Rally.technicalservices.dialog.Process', {
      	   	     processDefinition: new_pd,
      	   	     projectRef: this.projectRef
         	 	});
       	   	dlg.show();

    	}
    	
     },
 
    /*
     * _initiateProcessDialog:  launches the process dialog for the selected process and record. 
     */
    _initiateProcessDialog: function(grid,rowIndex, pd){
    	this.logger.log('_initiateProcessDialog',grid,rowIndex,pd.shortName);
    	var rec = grid.getStore().getAt(rowIndex);
    	dlg = Ext.create('Rally.technicalservices.dialog.Process', {
    	     processDefinition: pd,
    	     projectRef: this.projectRef,
    	     record: rec
    	 });
    	dlg.show();
    }

});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'button_box', padding: 10},
        {xtype:'container',itemId:'grid_box', padding: 50},
        {xtype:'tsinfolink'}
    ],
    
    launch: function() {
      // Hardcoded process definitions  
    	var rally_type = 'User Story';
        var pd1 = Ext.create('Rally.technicalservices.ProcessDefinition',{
            processName: '[Process] Block a User Story',
            shortName: 'Block',
            rallyType: rally_type,
            rallyField: 'Blocked',
        	processDetail: {
        		'true': ['BlockedReason','BlockerCategory','BlockerCreationDate','Release','Iteration','Project']
//    		'true': ['BlockedReason','BlockerCategory','BlockerOwner','BlockerCreationDate','BlockerEstimatedResolutionDate','Release','Iteration','Project']
                	}
        });
        var pd2 = Ext.create('Rally.technicalservices.ProcessDefinition',{
            processName: '[Process] Create-a-User Story',
            shortName: 'Add User Story',
            processType: 'new',
            rallyType: rally_type,
        	processDetail: {
//    			required : ['Name','UserStoryType','Project','Description','Iteration','Release','Owner']
    			required : ['Name','Project','Description','Iteration','Release','Owner']

        	}
        });
 
        var process_driver = Ext.create('Rally.technicalservices.ProcessDriver',{
        	processDefinitions: [pd1,pd2],
        	projectRef: this.getContext().getProjectRef()
        });
        //END Hardcoded process definitions
        
        var add_new_btn = this.down('#button_box').add({
        	xtype: 'rallybutton',
        	text: process_driver.getAddNewText(),
        	cls: 'primary small',
        });
        add_new_btn.on('click',process_driver.addNew, process_driver);
        
        this._loadAStoreWithAPromise(rally_type, process_driver.getFetchFields()).then({
            scope: this,
            success: function(store){
                this.down('#grid_box').add({
                    xtype: 'rallygrid',
                    store: store,
                    enableBlockedReasonPopover: false,
                    columnCfgs: process_driver.getColumnConfigurations(),
                    showRowActionsColumn: false,
                    enableBulkEdit: false,
                    enableRanking: false,
                    enableEditing: false
                });
            },
            failure: function(error_message){
                alert(error_message);
            }
        });
    },
    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        
        var defectStore = Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            autoLoad: true,
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(store);
                    } else {
                        deferred.reject('Failed to load store for model [' + model_name + '] and fields [' + model_fields.join(',') + ']');
                    }
                }
            }
        });
        return deferred.promise;
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Process Initiator'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.ts-secondary-button {
	color: #00A9E0;
	font-family: NotoSans, Helvetica, Arial;
	background-color: #FFFFFF;
	border:1px solid #00A9E0;
}
.ts-secondary-button:hover {
	color: #00A9E0;
	font-family: NotoSans, Helvetica, Arial;
	background-color: transparent;
	cursor: pointer;
	border:1px solid #00A9E0;

}
    </style>

</head>
<body></body>
</html>